---
name: "calVersion File Check"

on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]
    paths:
      - "deploy/platform-2220-cluster/applications/vault/releases/**"
      - "deploy/platform-2220-cluster/applications/vault/prd/**"
      - "deploy/platform-2220-cluster/applications/vault/prd.yaml"
      - "deploy/platform-2220-cluster/applications/vault/ppr/**"
      - "deploy/platform-2220-cluster/applications/vault/ppr.yaml"

jobs:
  check-file-availability:
    runs-on: ubuntu-latest
    outputs:
      check_result: ${{ steps.check_calversion.outputs.check_result }}
    container:
      image: alpine:latest@sha256:56fa17d2a7e7f168a043a2712e63aed1f8543aeafdcee47c58dcffe38ed51099
    defaults:
      run:
        shell: sh

    steps:
      - name: Install dependencies
        run: |
          apk update && apk add --no-cache git curl yq
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          # Ensure we pull enough commit history to capture last commit fully
          fetch-depth: 0

      - name: Check last commit diff for "calVersion"
        id: check_calversion
        run: |
          # COMMIT_CONTENT="$(git show ${{ github.sha }})"
          # echo "::debug::Full commit content for ${{ github.sha }}:"
          # echo "$COMMIT_CONTENT" | while read -r line; do echo "::debug::$line"; done

          git fetch origin ${{ github.head_ref }}
          COMMIT_CONTENT=$(git log -1 --pretty=format:"%s" origin/${{ github.head_ref }})
          echo "The latest commit message is: $COMMIT_CONTENT"

          # Check if 'calVersion' exists
          if echo "$COMMIT_CONTENT" | grep -q "calVersion"; then
            echo "calVersion found"
            echo "check_result=1" >> "$GITHUB_OUTPUT"
          else
            echo "No 'calVersion' found in the last commit content. Exiting successfully."
            echo "check_result=0" >> "$GITHUB_OUTPUT"
          fi

      - name: Extract calVersion from Env YAML
        id: extract
        if: ${{ steps.check_calversion.outputs.check_result != 0 }}
        run: |
          # Define the environment files to search
          env_files="./deploy/platform-2220-cluster/applications/vault/ppr.yaml ./deploy/platform-2220-cluster/applications/vault/prd.yaml"
          yaml_files=""

          # Collect value files from environment files
          for env_file in $env_files; do
            if [ -f "$env_file" ]; then
              echo "::debug::Parsing environment file $env_file"
              # 'yq -r' returns raw strings line-by-line
              files="$(yq -r '.spec.sources[].helm.valueFiles[]' "$env_file" 2>/dev/null | sed 's|\$values|.|g')"
              yaml_files="$yaml_files $files"
            else
              echo "::warning::Env file $env_file not found."
            fi
          done

          if [ -z "$yaml_files" ]; then
            echo "::error::No value files found in the Env files. Exiting."
            exit 1
          fi

          echo "::debug::Value files to search calVersion in:"
          echo "::debug::$yaml_files"

          # Parse calVersion from collected value files
          versions=""
          for file in $yaml_files; do
            if [ -f "$file" ]; then
              found="$(yq -o=json '.appset.categoryValues | .. | select(has("calVersion")) | .calVersion' "$file" 2>/dev/null || true)"
              if [ -n "$found" ]; then
                echo "::debug::Found calVersion in $file: $found"
                versions="$versions $found"
              fi
            else
              echo "::warning::Value file $file not found."
            fi
          done

          if [ -z "$versions" ]; then
            echo "::error::No calVersion found in value files. Exiting."
            exit 1
          fi

          # Remove duplicates
          unique_versions="$(echo "$versions" | tr ' ' '\n' | sort -u | tr '\n' ' ')"

          echo "Found unique calVersions: $unique_versions"
          echo "::set-output name=calVersions::$unique_versions"

      - name: Validate File Accessibility
        if: ${{ steps.check_calversion.outputs.check_result != 0 }}
        run: |
          for version in ${{ steps.extract.outputs.calVersions }}; do
            url="https://ledger-crypto-assets.s3.eu-west-1.amazonaws.com/atps/$version/versions.json"
            status="$(curl -s -o /dev/null -w '%{http_code}' "$url")"
            # Quick check for 2xx status
            echo "$status" | grep -qE '^2[0-9]{2}$' || {
              echo "::error::File $url not found or inaccessible for calVersion: $version."
              exit 1
            }
            echo "File $url is accessible for calVersion: $version."
          done
