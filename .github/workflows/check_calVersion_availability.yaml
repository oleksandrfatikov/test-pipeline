---
name: "calVersion File Check"

on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]
    paths:
      - "deploy/platform-2220-cluster/applications/vault/releases/**"
      - "deploy/platform-2220-cluster/applications/vault/prd/**"
      - "deploy/platform-2220-cluster/applications/vault/prd.yaml"
      - "deploy/platform-2220-cluster/applications/vault/ppr/**"
      - "deploy/platform-2220-cluster/applications/vault/ppr.yaml"

jobs:
  check-file-availability:
    runs-on: ubuntu-latest
    outputs:
      check_result: ${{ steps.check_calversion.outputs.check_result }}
    container:
      image: alpine:latest@sha256:56fa17d2a7e7f168a043a2712e63aed1f8543aeafdcee47c58dcffe38ed51099
    defaults:
      run:
        shell: sh

    steps:
      - name: Install dependencies
        run: |
          apk update && apk add --no-cache git curl yq
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          # Ensure we pull enough commit history to capture last commit fully
          fetch-depth: 0

      - name: Check last commit diff for "calVersion"
        id: check_calversion
        run: |

          git fetch origin ${{ github.head_ref }}
          COMMIT_CONTENT=$(git show origin/${{ github.head_ref }})
          echo "The latest commit message is: $COMMIT_CONTENT"

          # Check if 'calVersion' exists
          if echo "$COMMIT_CONTENT" | grep -q "calVersion"; then
            echo "calVersion found"

            versions=$(echo $COMMIT_CONTENT | egrep calVersion: | awk -F ': ' '{print $2};')
            versions=$(echo $versions | tr '\n' ' ')
            echo "versions: $versions"
            echo "Content $COMMIT_CONTENT"

            for v in $(echo $versions) ;
            do
                v=$(echo $v | sed 's/\n//g')
                url="https://ledger-crypto-assets.s3.eu-west-1.amazonaws.com/atps/$v/versions.json"
                curl "$url";
                stat=$(curl -s -o /dev/null -w '%{http_code}' "$url")

                if [[ "$stat" =~ ^2[0-9]{2}$ ]]; then
                   echo "File $url is accessible for calVersion: $v."
                else
                   echo "::error::File $url not found or inaccessible for calVersion: $version."
                   exit 1
                fi
                  echo "$stat";
            done

          else
            echo "No 'calVersion' found in the last commit content. Exiting successfully."
            echo "check_result=0" >> "$GITHUB_OUTPUT"
          fi

