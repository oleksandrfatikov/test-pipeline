crds:
  install: true
  keep: true

global:
  nodeSelector:
    role.ledger.com/nodes: "true"
  logging:
    level: warn

repoServer:
  env:
    - name: XDG_CONFIG_HOME
      value: /.config
    - name: SOPS_AGE_KEY_FILE
      value: /.config/sops/age/keys.txt
  volumes:
    - name: custom-tools
      emptyDir: {}
    - name: sops-age
      secret:
        secretName: sops-age
  volumeMounts:
    - mountPath: /usr/local/bin/kustomize
      name: custom-tools
      subPath: kustomize
    - mountPath: /.config/kustomize/plugin/viaduct.ai/v1/ksops/ksops
      name: custom-tools
      subPath: ksops
    - mountPath: /.config/sops/age/keys.txt
      name: sops-age
      subPath: keys.txt
  initContainers:
    - name: install-ksops
      image: viaductoss/ksops:v4.3.3@sha256:6b5ec4b6144307f78bcddffd8f09020482836eee34cf77bf4ce8614b0452a73c
      command: ["/bin/sh", "-c"]
      args:
        - echo "Installing KSOPS...";
          mv ksops /custom-tools/;
          mv kustomize /custom-tools/;
          echo "Done.";
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
  podAnnotations:
    ad.datadoghq.com/repo-server.checks: |
      {
        "argocd": {
          "init_config": {},
          "instances": [
            {
              "repo_server_endpoint": "http://%%host%%:8084/metrics"
            }
          ]
        }
      }

server:
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      haproxy.org/ssl-redirect: "true"
      haproxy.org/server-ssl: "true"
    ingressClassName: "haproxy"
    hostname: argocd-rbx.ovh.prd.ldg-tech.com
    path: /
    pathType: Prefix
    tls: true
  podAnnotations:
    ad.datadoghq.com/server.checks: |
      {
        "argocd": {
          "init_config": {},
          "instances": [
            {
              "api_server_endpoint": "http://%%host%%:8083/metrics"
            }
          ]
        }
      }

dex:
  volumeMounts:
    - mountPath: /tmp/oidc
      name: google-json
      readOnly: true
  volumes:
    - name: google-json
      secret:
        defaultMode: 420
        secretName: argocd-google-groups-json

configs:
  cm:
    url: &url https://argocd-rbx.ovh.prd.ldg-tech.com
    exec.enabled: "true"
    kustomize.buildOptions: --enable-alpha-plugins --enable-helm
    dex.config: |
      connectors:
      - config:
          redirectURI: https://argocd-rbx.ovh.prd.ldg-tech.com/api/dex/callback
          clientID: $argocd-helm-values:dex.googlegroups.clientID
          clientSecret: $argocd-helm-values:dex.googlegroups.clientSecret
          #serviceAccountFilePath: /tmp/oidc/googleAuth.json
          #adminEmail: sre-team@ledger.fr
        type: google
        id: google
        name: Google
    accounts.bot-atlas: apiKey
  rbac:
    create: true
    policy.default: role:org-readonly
    policy.csv: |
      p, role:org-readonly, clusters, get, */*, allow
      p, role:org-readonly, projects, get, */*, allow
      p, role:org-readonly, applications, get, */*, allow
      p, role:org-readonly, applications, sync, */*, allow
      p, role:org-readonly, applicationsets, get, */*, allow
      p, role:org-readonly, applicationsets, sync, */*, allow
      p, role:org-readonly, repositories, get, */*, allow
      p, role:org-readonly, accounts, get, */*, allow
      p, role:org-readonly, exec, get, */*, allow
      p, role:org-readonly, exec, create, */*, allow
      p, role:org-readonly, logs, get, */*, allow
      g, bot-atlas, role:readonly
      p, bot-atlas, applications, update, 1047-atlas/*, allow
  secret:
    githubSecret: $argocd-helm-values:webhook.github.secret

controller:
  podAnnotations:
    ad.datadoghq.com/application-controller.checks: |
      {
        "argocd": {
          "init_config": {},
          "instances": [
            {
              "app_controller_endpoint": "http://%%host%%:8082/metrics",
              "rename_labels": {
                "name": "app_controller"
              }
            }
          ]
        }
      }

notifications:
  argocdUrl: *url
  secret:
    create: false
  notifiers:
    service.slack: |
      token: $slack-token
    service.github: |
      appID: 405335
      installationId: 42702306
      privateKey: $github-privateKey
  templates:
    template.app-created: |
      message: Application {{.app.metadata.name}} has been created.
      github:
        repoURLPath: "{{.app.spec.source.repoURL}}"
        revisionPath: "{{.app.status.operationState.syncResult.revision}}"
        status:
          state: pending
          label: "continuous-delivery/{{.app.metadata.name}}"
          targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        # deployment:
        #   state: pending
        #   environment: >-
        #     {{if and (.app.metadata.annotations) ('argocd.ledger.fr/environment' in index .app.metadata.annotations)}}
        #       {{index .app.metadata.annotations 'argocd.ledger.fr/environment'}}
        #     {{else}}
        #       production
        #     {{end}}
        #   environmentURL: "{{with .app.status.summary.externalURLs}}{{index . 0}}{{end}}"
        #   logURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        #   requiredContexts: []
      slack:
        attachments: |
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
              "title": "Revision",
              "value": "{{.app.status.sync.revision}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-deleted: |
      message: Application {{.app.metadata.name}} has been deleted.
      github:
        repoURLPath: "{{.app.spec.source.repoURL}}"
        revisionPath: "{{.app.status.operationState.syncResult.revision}}"
        # deployment:
        #   state: inactive
        #   environment: >-
        #     {{if and (.app.metadata.annotations) ('argocd.ledger.fr/environment' in index .app.metadata.annotations)}}
        #       {{index .app.metadata.annotations 'argocd.ledger.fr/environment'}}
        #     {{else}}
        #       production
        #     {{end}}
        #   environmentURL: "{{with .app.status.summary.externalURLs}}{{index . 0}}{{end}}"
        #   logURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        #   requiredContexts: []
      slack:
        attachments: |
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
              "title": "Revision",
              "value": "{{.app.status.sync.revision}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    # FIXME: remove deployment here when we enable deployment everywhere else
    template.app-deployed: |
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
      github:
        repoURLPath: "{{.app.spec.source.repoURL}}"
        revisionPath: "{{.app.status.operationState.syncResult.revision}}"
        status:
          state: success
          label: "continuous-delivery/{{.app.metadata.name}}"
          targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        deployment:
          state: success
          environment: >-
            {{- if and (.app.metadata.annotations) (index .app.metadata.annotations "argocd.ledger.fr/environment") -}}
              {{- index .app.metadata.annotations "argocd.ledger.fr/environment" -}}
            {{- else -}}
              Production
            {{- end -}}
          environmentURL: "{{with .app.status.summary.externalURLs}}{{index . 0}}{{end}}"
          logURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
          requiredContexts: []
        pullRequestComment:
          content: |
            Application {{.app.metadata.name}} is now running new version of deployments manifests.
            URL(s): {{range $index, $url := .app.status.summary.externalURLs}}{{$url}} {{end}}
            See more here: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true
      slack:
        attachments: |
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
              "title": "Revision",
              "value": "{{.app.status.sync.revision}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-deployed-always: |
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
      github:
        repoURLPath: "{{.app.spec.source.repoURL}}"
        revisionPath: "{{.app.status.operationState.syncResult.revision}}"
        status:
          state: success
          label: "continuous-delivery/{{.app.metadata.name}}"
          targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        # deployment:
        #   state: success
        #   environment: >-
        #     {{if and (.app.metadata.annotations) ('argocd.ledger.fr/environment' in index .app.metadata.annotations)}}
        #       {{index .app.metadata.annotations 'argocd.ledger.fr/environment'}}
        #     {{else}}
        #       production
        #     {{end}}
          environmentURL: "{{with .app.status.summary.externalURLs}}{{index . 0}}{{end}}"
          logURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
          requiredContexts: []
    template.app-health-degraded: |
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
        Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
      github:
        repoURLPath: "{{.app.spec.source.repoURL}}"
        revisionPath: "{{.app.status.operationState.syncResult.revision}}"
        status:
          state: error
          label: "continuous-delivery/{{.app.metadata.name}}"
          targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        # deployment:
        #   state: error
        #   environment: >-
        #     {{if and (.app.metadata.annotations) ('argocd.ledger.fr/environment' in index .app.metadata.annotations)}}
        #       {{index .app.metadata.annotations 'argocd.ledger.fr/environment'}}
        #     {{else}}
        #       production
        #     {{end}}
        #   environmentURL: "{{with .app.status.summary.externalURLs}}{{index . 0}}{{end}}"
        #   logURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        #   requiredContexts: []
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#f4c030",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-health-healthy: |
      message: |
        Application {{.app.metadata.name}} is healthy
      github:
        repoURLPath: "{{.app.spec.source.repoURL}}"
        revisionPath: "{{.app.status.operationState.syncResult.revision}}"
        status:
          state: success
          label: "continuous-delivery/{{.app.metadata.name}}"
          targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        # deployment:
        #   state: success
        #   environment: >-
        #     {{if and (.app.metadata.annotations) ('argocd.ledger.fr/environment' in index .app.metadata.annotations)}}
        #       {{index .app.metadata.annotations 'argocd.ledger.fr/environment'}}
        #     {{else}}
        #       production
        #     {{end}}
        #   environmentURL: "{{with .app.status.summary.externalURLs}}{{index . 0}}{{end}}"
        #   logURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        #   requiredContexts: []
    template.app-sync-failed: |
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      github:
        repoURLPath: "{{.app.spec.source.repoURL}}"
        revisionPath: "{{.app.status.operationState.syncResult.revision}}"
        status:
          state: failure
          label: "continuous-delivery/{{.app.metadata.name}}"
          targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        # deployment:
        #   state: failure
        #   environment: >-
        #     {{if and (.app.metadata.annotations) ('argocd.ledger.fr/environment' in index .app.metadata.annotations)}}
        #       {{index .app.metadata.annotations 'argocd.ledger.fr/environment'}}
        #     {{else}}
        #       production
        #     {{end}}
        #   environmentURL: "{{with .app.status.summary.externalURLs}}{{index . 0}}{{end}}"
        #   logURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        #   requiredContexts: []
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#E96D76",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-running: |
      message: |
        The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      github:
        repoURLPath: "{{.app.spec.source.repoURL}}"
        revisionPath: "{{.app.status.operationState.syncResult.revision}}"
        status:
          state: in_progress
          label: "continuous-delivery/{{.app.metadata.name}}"
          targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        # deployment:
        #   state: in_progress
        #   environment: >-
        #     {{if and (.app.metadata.annotations) ('argocd.ledger.fr/environment' in index .app.metadata.annotations)}}
        #       {{index .app.metadata.annotations 'argocd.ledger.fr/environment'}}
        #     {{else}}
        #       production
        #     {{end}}
        #   environmentURL: "{{with .app.status.summary.externalURLs}}{{index . 0}}{{end}}"
        #   logURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        #   requiredContexts: []
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#0DADEA",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-status-unknown: |
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
        Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        {{if ne .serviceType "slack"}}
        {{range $c := .app.status.conditions}}
            * {{$c.message}}
        {{end}}
        {{end}}
      github:
        repoURLPath: "{{.app.spec.source.repoURL}}"
        revisionPath: "{{.app.status.operationState.syncResult.revision}}"
        status:
          state: pending
          label: "continuous-delivery/{{.app.metadata.name}}"
          targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        # deployment:
        #   state: pending
        #   environment: >-
        #     {{if and (.app.metadata.annotations) ('argocd.ledger.fr/environment' in index .app.metadata.annotations)}}
        #       {{index .app.metadata.annotations 'argocd.ledger.fr/environment'}}
        #     {{else}}
        #       production
        #     {{end}}
        #   environmentURL: "{{with .app.status.summary.externalURLs}}{{index . 0}}{{end}}"
        #   logURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        #   requiredContexts: []
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#E96D76",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-succeeded: |
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      github:
        repoURLPath: "{{.app.spec.source.repoURL}}"
        revisionPath: "{{.app.status.operationState.syncResult.revision}}"
        status:
          state: success
          label: "continuous-delivery/{{.app.metadata.name}}"
          targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]

  triggers:
    trigger.on-created: |
      - description: Application is created.
        oncePer: app.metadata.name
        send:
        - app-created
        when: "true"
    trigger.on-deleted: |
      - description: Application is deleted.
        oncePer: app.metadata.name
        send:
        - app-deleted
        when: app.metadata.deletionTimestamp != nil
    trigger.on-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.operationState?.syncResult?.revision
        send:
        - app-deployed
        when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded']
          and app.status.health.status == 'Healthy'
    trigger.on-deployed-always: |
      - description: Application is synced and healthy.
        send:
        - app-deployed-always
        when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded']
          and app.status.health.status == 'Healthy'
    trigger.on-health-degraded: |
      - description: Application has degraded
        send:
        - app-health-degraded
        when: app.status.health.status == 'Degraded'
    trigger.on-health-healthy: |
      - description: Application is healthy
        send:
        - app-health-healthy
        when: app.status.health.status == 'Healthy'
    trigger.on-sync-failed: |
      - description: Application syncing has failed
        send:
        - app-sync-failed
        when: app.status.operationState != nil and app.status.operationState.phase in ['Error',
          'Failed']
    trigger.on-sync-running: |
      - description: Application is being synced
        send:
        - app-sync-running
        when: app.status.operationState != nil and app.status.operationState.phase in ['Running']
    trigger.on-sync-status-unknown: |
      - description: Application status is 'Unknown'
        send:
        - app-sync-status-unknown
        when: app.status.sync.status == 'Unknown'
    trigger.on-sync-succeeded: |
      - description: Application syncing has succeeded
        send:
        - app-sync-succeeded
        when: app.status.operationState != nil and app.status.operationState.phase in ['Succeeded']

    defaultTriggers: |
      - on-created
      - on-deleted
      - on-deployed
      - on-health-degraded
      - on-sync-failed
      - on-sync-status-unknown
      - on-sync-succeeded

    # FIXME: remove on-deployed when we enable deployment everywhere
    defaultTriggers.github: |
      - on-created
      - on-deleted
      - on-deployed
      - on-deployed-always
      - on-health-degraded
      - on-health-healthy
      - on-sync-failed
      - on-sync-running
      - on-sync-status-unknown

  subscriptions: []
