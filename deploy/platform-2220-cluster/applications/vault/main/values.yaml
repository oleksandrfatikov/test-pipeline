---
appset:
  categoryValues:
    default:
      inlineValues:
        valueBundles:
          eksStg:
            enabled: true
          initDBPostgres:
            values:
              initContainers:
                init-db-postgres:
                  image: "jfrog.ledgerlabs.net/vault-oci-prod-green/postgres-initdb:v14.13@sha256:d8ad7f9d989e7198491747605142531fcdf31ecda34b294afc8d821d46e51b1c"
        custom:
          env: main
          vaultProjectId: "2063"
          lamaNamespace: 2063-vault-stg
          eksClusterId: "2021"
          cloudflareHost: vault-main.ledger-test.com

    hsmdrivers:
      inlineValues:
        env:
          VAULT_HSM_DRIVER_FORWARD_ONBOARDING: "true"
          VAULT_HSM_DRIVER_FORWARD_USERS: "true"
          VAULT_HSM_DRIVER_FORWARD_WHITELISTS: "true"
          VAULT_HSM_DRIVER_FORWARD_GROUPS: "true"
          VAULT_HSM_DRIVER_ENABLE_MULTICURRENCY_POLICIES: "true"
        resources:
          requests:
            cpu: "250m"
            memory: "256Mi"
        certexporter:
          image:
            tag: "1.0.0"
    hsmproxys:
      inlineValues:
        resources:
          requests:
            cpu: "250m"
            memory: "256Mi"

    wds:
      inlineValues:
        resources:
          requests:
            cpu: "250m"

    gates-main:
      inlineValues:
        env:
          USE_GUNICORN: true
          VAULT_GUNICORN_WORKERS: 4
          GUNICORN_TIMEOUT: 600
          VAULT_DB_MAX_CONNECTIONS: 100

    gates:
      extendCategories: [gates-base, gates-main]

  projectValues:
    upstream:
      # =====================================================================
      # WARNING: Do not modify the structure of the keycloak configuration
      # below as it is used by Renovate for automated updates
      # =====================================================================
      keycloak:
        targetRevision: 24.6.3
        inlineValues:
          production: true
          ingress:
            enabled: true
            hostname: vault-keycloak-main.aws.stg.ldg-tech.com
            hostnameStrict: true
            tls: true
            ingressClassName: trusted
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt-prod
          adminIngress:
            enabled: false
          tls:
            enabled: true
            autoGenerated: true
          extraEnvVars: []
      common-secrets:
        inlineValues:
          valueBundles:
            eksStg:
              enabled: true
          externalSecret:
            postgresql:
              enabled: true
              dataFrom:
                - extract:
                    key: 2063/tf-postgresql
            rabbitmq:
              enabled: true
              dataFrom:
                - extract:
                    key: 2063/tf-rabbitmq
            keycloak:
              enabled: true
              dataFrom:
                - extract:
                    key: keycloak-stg/tf-keycloak

    all:
      lam:
        inlineValues:
          env:
            GUNICORN_WORKERS: 4
            GUNICORN_TIMEOUT: 600
          resources:
            requests:
              cpu: "250m"

      apdu-connector:
        inlineValues:
          resources:
            requests:
              cpu: "250m"
          custom:
            cloudflareHost: apdu-main.ledger-test.com

      api-gateway:
        inlineValues:
          custom:
            cloudflareHost: api-main.ledger-test.com
          env:
            GUNICORN_WORKERS: 1
            GUNICORN_TIMEOUT: 600

          horizontalPodAutoscaler:
            create: true
            minReplicas: 1
            maxReplicas: 5
            metrics:
              - type: Resource
                resource:
                  name: cpu
                  target:
                    type: Utilization
                    averageUtilization: 80
              - type: Resource
                resource:
                  name: memory
                  target:
                    type: Utilization
                    averageUtilization: 80

      api-keys:
        inlineValues:
          resources:
            limits:
              cpu: "250m"
              memory: "1.5Gi"
            requests:
              cpu: "250m"
              memory: "768Mi"

      aus:
        inlineValues:
          initContainers:
            init-db-postgres:
              image: "ghcr.io/ledgerhq/postgres-initdb:v14.13@sha256:42e3a8105c7be63cf1e4cd273bafe52042b9c8796dc4af21a6bb1adf6ac6b929"
              env:
                POSTGRES_FORCE_ALTER_PASSWORD: "true"
          app:
            resources:
              requests:
                cpu: "250m"
                memory: "512Mi"

      authentication-service:
        inlineValues:
          resources:
            requests:
              cpu: "250m"
              memory: "512Mi"

      coin-gateway:
        inlineValues:
          env:
            CATAPLASM_WORKSPACES: "{}"
          ### temporary for testing purposes, should be removed later
          persistence:
            tcpdump:
              enabled: true
              type: emptyDir
          sidecars:
            tcpdump:
              enabled: true
              image: "jfrog.ledgerlabs.net/ossproxy-oci-proxy-dockerio/corfr/tcpdump"
              securityContext:
                capabilities:
                  add: ["NET_ADMIN", "NET_RAW"]
              volumeMounts:
                - name: tcpdump
                  mountPath: /tcpdump
              command: ["/bin/sh", "-c"]
              args:
                - |
                  mkdir -p /tcpdump;
                  tcpdump -i any -nn -s 0 \
                    -w /tcpdump/trace-$(hostname)-$(date +%Y%m%d%H%M).pcap \
                    -C 50 -Z root &

                  while true; do
                    find /tcpdump -type f -name "*.pcap*" ! -name "*.gz" -mmin +5 -exec gzip {} \;
                    sleep 300
                  done

      device-registry:
        inlineValues:
          custom:
            cloudflareHost: device-registry-main.ledger-test.com
      front:
        inlineValues:
          ingress:
            test-whitelabel.aws.stg.ldg-tech.com: {}
      nfts-api:
        inlineValues:
          resources:
            limits:
              cpu: "250m"
              memory: "512Mi"
            requests:
              cpu: "250m"
              memory: "512Mi"

      notifier:
        inlineValues:
          resources:
            limits:
              cpu: "500m"
              memory: "1Gi"
            requests:
              cpu: "500m"
              memory: "512Mi"
          ingress:
            test-whitelabel.aws.stg.ldg-tech.com: {}

      notification-center:
        inlineValues:
          resources:
            limits:
              cpu: "500m"
              memory: "1Gi"
            requests:
              cpu: "500m"
              memory: "512Mi"

      organizations-api:
        inlineValues:
          resources:
            limits:
              cpu: "500m"
              memory: "512Mi"

      tx-scheduler:
        inlineValues:
          resources:
            requests:
              cpu: "250m"
              memory: "512Mi"

      revault-api:
        inlineValues:
          env:
            # this URL will be used as default if revault-api is not able
            # to grab the information from org-api (it happens when testing
            # only the onboarding, without deploying a Gate)
            HSM_DRIVER_URL: "http://hsm-driver-default"

            # this enable /debug router that contains some useful endpoints
            # for debugging (e.g: list all workspaces, users, ...)
            ENABLE_DEBUG_PROCEDURES: "1"

            # override the debug auth token pulled from secret
            # convenient for automation
            REVAULT_DEBUG_AUTH_TOKEN: "stg-debug-auth-token"

            # override the root auth token pulled from secret
            # convenient for automation
            REVAULT_ROOT_AUTH_TOKEN: "stg-root-auth-token"

            # keycloak vault authentication service account secret for revault
            # this value should never been pushed in prod
            # instead, we should use KEYCLOAK_VAULT_AUTH_CLIENT_SECRET_NAME_TEMPLATE
            # and KEYCLOAK_VAULT_AUTH_CLIENT_SECRET_PROPERTY to fetch it from
            # k8s API to have a per workspace secret
            KEYCLOAK_VAULT_AUTH_CLIENT_SECRET: "revault-auth-service-secret"

            AUTH_SERVICE_URL: "http://authentication-service"
          resources:
            requests:
              cpu: "250m"

      revault-onboarding:
        inlineValues:
          custom:
            blueAppVersion: "6.2.0-dev"
            staxAppVersion: "2.0.2-dev"
            staxFirmwareVersion: "1.8.0"
            deviceManagerProviderId: 1
            showDeviceSelector: true
            onboardingApiUrl: "onboarding-main.ledger-test.com"
            deviceApiUrl: https://device-api-main.ledger-test.com
            vaultRedirectUrl: "https://vault-main.ledger-test.com"
          resources:
            requests:
              cpu: "250m"

      revault-backoffice:
        inlineValues:
          resources:
            requests:
              cpu: "250m"
          custom:
            revaultApiUrl: "https://re.vault-main.ledger-test.com/v1"

      revault-web:
        inlineValues:
          custom:
            blueAppVersion: "6.2.0-dev"
            staxAppVersion: "1.6.2-dev"
            showDeviceSelector: true
          resources:
            requests:
              cpu: "250m"

      tradelink:
        inlineValues:
          initContainers:
            init-db-postgres:
              env:
                POSTGRES_FORCE_ALTER_PASSWORD: "true"
      web3checks-vault:
        inlineValues:
          resources:
            requests:
              cpu: "250m"

    gates:
      # ========================================================================
      # Used to run automated tests from new_onboarding workflow
      # ========================================================================
      gate-onboarding4:
        # used to run new_onboarding e2e tests, do not touch
        inlineValues:
          env:
            VAULT_COMPARTMENT_ID: 75008

      gate-autoci3salt:
        # used to check balances for e2e tests, do not touch
        inlineValues:
          env:
            VAULT_COMPARTMENT_ID: 75043
      gate-apisalt:
        # used to check balances for e2e tests, do not touch
        inlineValues:
          env:
            VAULT_COMPARTMENT_ID: 75044
      gate-apisalt2:
        # used to check balances for e2e tests, do not touch
        inlineValues:
          env:
            VAULT_COMPARTMENT_ID: 76043

      gate-mainpublicapi:
        # used to run publicapi tests, do not touch
        inlineValues:
          env:
            VAULT_COMPARTMENT_ID: 62555
      gate-mainsaltqa:
        # used to run E2E tests, do not touch
        inlineValues:
          env:
            VAULT_COMPARTMENT_ID: 62666

      gate-tradelinkdev:
        inlineValues:
          env:
            VAULT_HSM_DRIVER_NAME: tradelink-dev
            VAULT_COMPARTMENT_ID: 60599

      # QA new onboarding
      # -----------------
      gate-onbtest0003:
        inlineValues:
          env:
            VAULT_COMPARTMENT_ID: 64283

      gate-pdeonboarding:
        inlineValues:
          env:
            VAULT_COMPARTMENT_ID: 1999

      # QA manual tests
      # -----------------
      gate-enclave1:
        inlineValues:
          env:
            VAULT_COMPARTMENT_ID: 76009
            VAULT_HSM_DRIVER_NAME: enclave
            VAULT_HSM_SCRIPTS_VERSION: "17.0.2-dave+c175b04d"

      gate-whitelabel:
        inlineValues:
          custom:
            host: test-whitelabel.aws.stg.ldg-tech.com
          env:
            VAULT_COMPARTMENT_ID: 76010
            VAULT_DOMAIN_NAME: "test-whitelabel.aws.stg.ldg-tech.com"
            VAULT_HSM_SCRIPTS_VERSION: "17.2.2-dave-4ec23da8"
          app:
            resources:
              limits:
                cpu: "4"
                memory: "8Gi"
